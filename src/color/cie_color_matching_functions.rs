// 2degrees XYZ color matching functions 5nm increments 2006

use crate::lighting::Spectra;

pub fn integrated_x_response(spectra: &Spectra) -> f32 {
    let mut sum = 0.;
    for λ in (380..780).step_by(10) {
        // println!("{}", λ);
        sum += λx_response(λ as f32) * spectra.from_λ(λ as f32);
    }
    return sum * spectra.get_sample_width();
}

pub fn integrated_y_response(spectra: &Spectra) -> f32 {
    let mut sum = 0.;
    for λ in (380..780).step_by(10) {
        sum += λy_response(λ as f32) * spectra.from_λ(λ as f32);
    }
    return sum * spectra.get_sample_width();
}

pub fn integrated_z_response(spectra: &Spectra) -> f32 {
    let mut sum = 0.;
    for λ in (380..780).step_by(10) {
        sum += λz_response(λ as f32) * spectra.from_λ(λ as f32);
    }
    return sum * spectra.get_sample_width();
}

// contribution at given wavelength
// NOT NORMALIZED
pub fn λx_response(λ: f32) -> f32 {
    if (λ < 380.) || (λ > 830.) {
        return 0.;
    }

    return X[(λ as usize - 380) / 5];
}

// contribution at given wavelength
// NOT NORMALIZED
// divide green by 1.3791 to normalize
pub fn λy_response(λ: f32) -> f32 {
    if (λ < 380.) || (λ > 830.) {
        return 0.;
    }
    return Y[(λ as usize - 380) / 5];
}

// contribution at given wavelength
// NOT NORMALIZED
pub fn λz_response(λ: f32) -> f32 {
    if (λ < 380.) || (λ > 830.) {
        return 0.;
    }
    return Z[(λ as usize - 380) / 5];
}

/// 380-830 5nm increments
const X: [f32; 91] = [
    0.0,
    0.0,
    0.003769647,
    0.009382967,
    0.02214302,
    0.04742986,
    0.08953803,
    0.1446214,
    0.2035729,
    0.2488523,
    0.2918246,
    0.3227087,
    0.3482554,
    0.3418483,
    0.3224637,
    0.2826646,
    0.2485254,
    0.2219781,
    0.1806905,
    0.129192,
    0.08182895,
    0.04600865,
    0.02083981,
    0.007097731,
    0.002461588,
    0.003649178,
    0.01556989,
    0.04315171,
    0.07962917,
    0.1268468,
    0.1818026,
    0.2405015,
    0.3098117,
    0.3804244,
    0.4494206,
    0.5280233,
    0.6133784,
    0.7016774,
    0.796775,
    0.8853376,
    0.9638388,
    1.051011,
    1.109767,
    1.14362,
    1.151033,
    1.134757,
    1.083928,
    1.007344,
    0.9142877,
    0.8135565,
    0.6924717,
    0.575541,
    0.4731224,
    0.3844986,
    0.2997374,
    0.2277792,
    0.1707914,
    0.1263808,
    0.09224597,
    0.0663996,
    0.04710606,
    0.03292138,
    0.02262306,
    0.01575417,
    0.01096778,
    0.00760875,
    0.005214608,
    0.003569452,
    0.002464821,
    0.001703876,
    0.001186238,
    0.0008269535,
    0.0005758303,
    0.0004058303,
    0.0002856577,
    0.0002021853,
    0.000143827,
    0.0001024685,
    0.00007347551,
    0.0000525987,
    0.00003806114,
    0.00002758222,
    0.00002004122,
    0.00001458792,
    0.00001068141,
    0.000007857521,
    0.000005768284,
    0.000004259166,
    0.000003167765,
    0.000002358723,
    0.000001762465,
];

/// 380-830 5nm increments
const Y: [f32; 91] = [
    0.0,
    0.0,
    0.0004146161,
    0.001059646,
    0.002452194,
    0.004971717,
    0.00907986,
    0.01429377,
    0.02027369,
    0.02612106,
    0.03319038,
    0.0415794,
    0.05033657,
    0.05743393,
    0.06472352,
    0.07238339,
    0.08514816,
    0.1060145,
    0.1298957,
    0.1535066,
    0.1788048,
    0.2064828,
    0.237916,
    0.285068,
    0.3483536,
    0.4277595,
    0.5204972,
    0.6206256,
    0.718089,
    0.7946448,
    0.8575799,
    0.9071347,
    0.9544675,
    0.9814106,
    0.9890228,
    0.9994608,
    0.9967737,
    0.9902549,
    0.9732611,
    0.9424569,
    0.8963613,
    0.8587203,
    0.8115868,
    0.7544785,
    0.6918553,
    0.6270066,
    0.5583746,
    0.489595,
    0.4229897,
    0.3609245,
    0.2980865,
    0.2416902,
    0.1943124,
    0.1547397,
    0.119312,
    0.08979594,
    0.06671045,
    0.04899699,
    0.03559982,
    0.02554223,
    0.01807939,
    0.01261573,
    0.008661284,
    0.006027677,
    0.004195941,
    0.002910864,
    0.001995557,
    0.001367022,
    0.0009447269,
    0.000653705,
    0.000455597,
    0.0003179738,
    0.0002217445,
    0.0001565566,
    0.0001103928,
    0.00007827442,
    0.00005578862,
    0.00003981884,
    0.00002860175,
    0.00002051259,
    0.00001487243,
    0.00001080001,
    0.00000786392,
    0.000005736935,
    0.000004211597,
    0.000003106561,
    0.000002286786,
    0.000001693147,
    0.000001262556,
    0.0000009422514,
    0.000000705386,
];
/// 380-830 5nm increments
const Z: [f32; 91] = [
    0.0,
    0.0,
    0.0184726,
    0.04609784,
    0.109609,
    0.2369246,
    0.4508369,
    0.7378822,
    1.051821,
    1.305008,
    1.552826,
    1.74828,
    1.917479,
    1.918437,
    1.848545,
    1.664439,
    1.522157,
    1.42844,
    1.25061,
    0.9991789,
    0.7552379,
    0.5617313,
    0.4099313,
    0.3105939,
    0.2376753,
    0.1720018,
    0.1176796,
    0.08283548,
    0.05650407,
    0.03751912,
    0.02438164,
    0.01566174,
    0.00984647,
    0.006131421,
    0.003790291,
    0.002327186,
    0.001432128,
    0.0008822531,
    0.0005452416,
    0.0003386739,
    0.0002117772,
    0.0001335031,
    0.00008494468,
    0.00005460706,
    0.00003549661,
    0.00002334738,
    0.00001554631,
    0.00001048387,
    0.,
    0.,
    0.,
    0.,
    0.,
    0.,
    0.,
    0.,
    0.,
    0.,
    0.,
    0.,
    0.,
    0.,
    0.,
    0.,
    0.,
    0.,
    0.,
    0.,
    0.,
    0.,
    0.,
    0.,
    0.,
    0.,
    0.,
    0.,
    0.,
    0.,
    0.,
    0.,
    0.,
    0.,
    0.,
    0.,
    0.,
    0.,
    0.,
    0.,
    0.,
    0.,
    0.,
];
